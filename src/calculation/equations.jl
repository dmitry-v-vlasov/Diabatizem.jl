using Calculus
using Logging
using ProgressMeter
using Nullables

import Dierckx
import Sundials

abstract type AreaSystem end

mutable struct AreaBunch <: AreaSystem
    states::Vector{Int}
    areas::Vector{SinglePeakNonadiabaticArea}
    RÀ°::Float64
    R ≥::Float64
end
function show(io::IO, ab::AreaBunch)
    print(io, "ùîπ{‚ü®$(ab.states)‚ü©; N·¥¨ = ($(length(ab.areas))); [$(ab.RÀ°), $(ab.R ≥)]; $(ab.areas)}")
end

function solverTransformationMatrixForAreas(
    areas::Array{Vector{SinglePeakNonadiabaticArea}, 2},
    ‚àÇ_‚àÇR::Array{Function, 2}, ‚àÇ_‚àÇR·µê·µí·µà·µâÀ°::Array{Function, 2},
    R·µõ::Vector{Float64}, C::DiabatizationSettings)
    Logging.configure(level=INFO)
    info("==== Starting selective transformation matrix solving ===")
    given_areas =
        sort(
            collect(
                Base.flatten(
                    filter(
                        vA‚Å± ≤ -> !isempty(vA‚Å± ≤) && vA‚Å± ≤[1].states[1] < vA‚Å± ≤[1].states[2], areas)));
            by = A -> A.coordinate_‚àÇ_‚àÇR, rev = true)
    info("The ordered area list:\n------")
    for area ‚àà given_areas
        info("Area: $area")
    end
    info("\n------")
    sel_area_extras = Dict{Tuple{Int, Int, Float64}, Tuple{Float64, Float64}}()
    sel_area_bunch_exclude = Dict{Tuple{Int, Int, Float64}, Bool}()
    for sel_area ‚àà C.areas
        s¬π = sel_area.states[1]; s¬≤ = sel_area.states[2]
        sel_area_key = (s¬π, s¬≤, floor(sel_area.coordinate, 1))
        sel_area_extras[sel_area_key] = sel_area.extra_length
        sel_area_bunch_exclude[sel_area_key] = sel_area.bunch_exclude
    end
    info("Selected area extra lenghts:\n------")
    info("$sel_area_extras")
    info("\n------")
    œµ·µü·¥ø = C.area_closeness
    info("Grouping the selected areas into bunches by their closeness within œµ·µü·¥ø = $(œµ·µü·¥ø) a.u.l.")
    bunched_areas = Set{Int}()
    bunches = Vector{AreaBunch}()
    for k = 1:length(given_areas)
        if k ‚àà bunched_areas
            continue
        end
        A·µè = given_areas[k]
        R·µè‚ÅªÀ° = A·µè.coordinate_from; R·µè‚Åª ≥ = A·µè.coordinate_to
        @assert(R·µè‚ÅªÀ° < R·µè‚Åª ≥, "Violated R·µè‚ÅªÀ° < R·µè‚Åª ≥: $R·µè‚ÅªÀ° < $R·µè‚Åª ≥")
        states_A·µè = A·µè.states
        extras_key_k = (states_A·µè[1], states_A·µè[2], floor(A·µè.coordinate_‚àÇ_‚àÇR, 1))
        extras_A·µè = sel_area_extras[extras_key_k]
        R·µè‚ÅªÀ°·µâ = R·µè‚ÅªÀ° - extras_A·µè[1]; R·µè‚Åª ≥·µâ = R·µè‚Åª ≥ + extras_A·µè[2];
        #info("R-Extras for $extras_key_k ‚áí $extras_A·µè; Interval becomes [$R·µè‚ÅªÀ°·µâ, $R·µè‚Åª ≥·µâ] ")

        remaining_areas = view(given_areas, (k + 1):length(given_areas))
        remaining_bunch_of_areas =
            map(j_A ≤ -> j_A ≤[2],
                filter(
                    j_A ≤ -> begin
                        info("Last bunched area: $extras_key_k, interval - [$R·µè‚ÅªÀ°·µâ |, $R·µè‚ÅªÀ°, $R·µè‚Åª ≥|, $R·µè‚Åª ≥·µâ]")

                        j, A ≤ = j_A ≤
                        states_A ≤ = A ≤.states
                        R ≤‚ÅªÀ° = A ≤.coordinate_from; R ≤‚Åª ≥ = A ≤.coordinate_to
                        if states_A ≤ == states_A·µè || states_A ≤[1] == states_A·µè[2] || states_A ≤[2] == states_A·µè[1]
                            extras_key_j = (states_A ≤[1], states_A ≤[2], floor(A ≤.coordinate_‚àÇ_‚àÇR, 1))
                            extras_A ≤ = sel_area_extras[extras_key_j]
                            R ≤‚ÅªÀ°·µâ = R ≤‚ÅªÀ° - extras_A ≤[1]; R ≤‚Åª ≥·µâ = R ≤‚Åª ≥ + extras_A ≤[2];

                            @assert(R ≤‚ÅªÀ° < R ≤‚Åª ≥, "Violated R ≤‚ÅªÀ° < R ≤‚Åª ≥: $R ≤‚ÅªÀ° < $R ≤‚Åª ≥")
                            b_j_k_overlapped = (R·µè‚Åª ≥ > R ≤‚ÅªÀ° && R·µè‚ÅªÀ° < R ≤‚Åª ≥) || (R ≤‚Åª ≥ > R·µè‚ÅªÀ° && R ≤‚ÅªÀ° < R·µè‚Åª ≥)
                            b_j_k_closed = (R·µè‚Åª ≥ > R ≤‚ÅªÀ° && R·µè‚ÅªÀ° > R ≤‚Åª ≥ && (R·µè‚ÅªÀ° - R ≤‚Åª ≥) < œµ·µü·¥ø) ||
                                        (R ≤‚Åª ≥ > R·µè‚ÅªÀ° && R ≤‚ÅªÀ° > R·µè‚Åª ≥ && (R ≤‚Åª ≥ - R·µè‚ÅªÀ°) < œµ·µü·¥ø)
                            b_j_k_overlapped_e = (R·µè‚Åª ≥·µâ > R ≤‚ÅªÀ°·µâ && R·µè‚ÅªÀ°·µâ < R ≤‚Åª ≥·µâ) || (R ≤‚Åª ≥·µâ > R·µè‚ÅªÀ°·µâ && R ≤‚ÅªÀ°·µâ < R·µè‚Åª ≥·µâ)
                            b_j_k_closed_e = (R·µè‚Åª ≥·µâ > R ≤‚ÅªÀ°·µâ && R·µè‚ÅªÀ°·µâ > R ≤‚Åª ≥·µâ && (R·µè‚ÅªÀ°·µâ - R ≤‚Åª ≥·µâ) < œµ·µü·¥ø) ||
                                        (R ≤‚Åª ≥·µâ > R·µè‚ÅªÀ°·µâ && R ≤‚ÅªÀ°·µâ > R·µè‚Åª ≥·µâ && (R ≤‚Åª ≥·µâ - R·µè‚ÅªÀ°·µâ) < œµ·µü·¥ø)
                            #info("Test $states_A·µè <-> $states_A ≤: o=$b_j_k_overlapped, c=$b_j_k_closed, $(R·µè‚ÅªÀ° - R ≤‚Åª ≥), $œµ·µü·¥ø, $R·µè‚ÅªÀ°, $R ≤‚Åª ≥)")
                            if b_j_k_overlapped || b_j_k_closed
                                #info("Closed areas for states $states_A·µè: overlapped=$b_j_k_overlapped, closed=$b_j_k_closed; j:[$R ≤‚ÅªÀ°, $R ≤‚Åª ≥], k:[$R·µè‚ÅªÀ°, $R·µè‚Åª ≥]")
                                if sel_area_bunch_exclude[extras_key_j]
                                    warn("Bunch exclude with key $extras_key_j")
                                    return false
                                end
                                push!(bunched_areas, k + j)
                                info("The areas $extras_key_k and $extras_key_j are bunched (intervals)")
                            elseif b_j_k_overlapped_e || b_j_k_closed_e
                                #info("Extra-Closed areas for states $states_A·µè: overlapped=$b_j_k_overlapped, closed=$b_j_k_closed; j:[$R ≤‚ÅªÀ°, $R ≤‚Åª ≥], k:[$R·µè‚ÅªÀ°, $R·µè‚Åª ≥]")
                                #info("R-Extras for $extras_key_j ‚áí $extras_A ≤; Interval becomes [$R ≤‚ÅªÀ°·µâ, $R ≤‚Åª ≥·µâ] ")
                                if sel_area_bunch_exclude[extras_key_j]
                                    warn("Bunch exclude with key $extras_key_j")
                                    return false
                                end
                                push!(bunched_areas, k + j)
                                info("The areas $extras_key_k and $extras_key_j are bunched (extra intervals)")
                            else
                                warn(
                                """
                                    The areas $extras_key_k and $extras_key_j are not bunched:
                                    $states_A·µè interval: [$R·µè‚ÅªÀ°·µâ |, $R·µè‚ÅªÀ°, $R·µè‚Åª ≥|, $R·µè‚Åª ≥·µâ]
                                    $states_A ≤ interval: [$R ≤‚ÅªÀ°·µâ |, $R ≤‚ÅªÀ°, $R ≤‚Åª ≥|, $R ≤‚Åª ≥·µâ]
                                """)
                            end
                            if b_j_k_overlapped || b_j_k_closed || b_j_k_overlapped_e || b_j_k_closed_e
                                info("Changing last bunched area $extras_key_k‚Üí$extras_key_j")
                                R·µè‚ÅªÀ° = A ≤.coordinate_from; R·µè‚Åª ≥ = A ≤.coordinate_to
                                states_A·µè = states_A ≤
                                extras_key_k = extras_key_j
                                extras_A·µè = sel_area_extras[extras_key_k]
                                R·µè‚ÅªÀ°·µâ = R·µè‚ÅªÀ° - extras_A·µè[1]; R·µè‚Åª ≥·µâ = R·µè‚Åª ≥ + extras_A·µè[2];
                            end
                            return Bool(b_j_k_overlapped || b_j_k_closed || b_j_k_overlapped_e || b_j_k_closed_e)
                        else
                            return false
                        end
                    end,
                    enumerate(remaining_areas)))
        bunch_of_areas = Vector{SinglePeakNonadiabaticArea}()
        push!(bunch_of_areas, A·µè)
        for remaining_area_from_bunch ‚àà remaining_bunch_of_areas
            push!(bunch_of_areas, remaining_area_from_bunch)
        end
        R·µá‚ÅªÀ° = minimum(map(A·µá -> A·µá.coordinate_from, bunch_of_areas))
        R·µá‚Åª ≥ = maximum(map(A·µá -> A·µá.coordinate_to, bunch_of_areas))
        states_A·µá = sort(unique(Base.flatten(map(A·µá -> A·µá.states, bunch_of_areas))))
        new_bunch = AreaBunch(states_A·µá, bunch_of_areas, R·µá‚ÅªÀ°, R·µá‚Åª ≥)
        #info("New area bunch: $new_bunch")
        push!(bunches, new_bunch)
    end
    info("The bunched areas are the following:\n------")
    for bunch ‚àà bunches
        info("B-Areas: $bunch")
    end
    info("\n------")
    info("Solving Cauchy problems...")

    last_matrices = Dict{Vector{Int}, Array{Float64, 2}}()

    solutions = Vector{LocalSolution}();
    for bunch ‚àà bunches
        info("=====================")
        info("Making a new Cauchy problem for the areas:\n$bunch")
        states = bunch.states
        info("The involved states: ‚ü®$states‚ü©")
        extra_lengths = Vector{Tuple{Float64, Float64}}()
        foreach(
            A·µá -> begin
                extras_key_b = (A·µá.states[1], A·µá.states[2], floor(A·µá.coordinate_‚àÇ_‚àÇR, 1))
                info("Trying key: $extras_key_b")
                extras_A·µá = sel_area_extras[extras_key_b]
                info("Key result: $extras_A·µá")
                push!(extra_lengths, extras_A·µá)
            end,
            sort(bunch.areas; by = A·µá -> A·µá.coordinate_‚àÇ_‚àÇR))
        info("Result extra lenghts: $extra_lengths")
        extra_left = extra_lengths[1][1]
        extra_right = extra_lengths[end][2]
        info("The areas extra lengths: left = $extra_left, right = $extra_right")
        info("From-s: $(map(A‚Å± -> A‚Å±.coordinate_from, bunch.areas))")
        info("To-s: $(map(A‚Å± -> A‚Å±.coordinate_to, bunch.areas))")
        RÀ¢·µó·µÉ ≥·µó = bunch.R ≥ + extra_right      # From higher R
        RÀ¢·µó·µí·µñ = bunch.RÀ° - extra_left        # To lower R
        info("The solution interval: [$(RÀ¢·µó·µÉ ≥·µó), $(RÀ¢·µó·µí·µñ)] derived from [$(bunch.R ≥), $(bunch.RÀ°)]")
        s¬π = states[1]; s¬≤ = states[end]
        NÀ°·µí·∂ú = s¬≤ - s¬π + 1
        view_‚àÇ_‚àÇRÀ°·µí·∂ú = view(‚àÇ_‚àÇR, s¬π:s¬≤, s¬π:s¬≤)
        view_‚àÇ_‚àÇR·µê·µí·µà·µâÀ°‚ÅªÀ°·µí·∂ú = view(‚àÇ_‚àÇR·µê·µí·µà·µâÀ°, s¬π:s¬≤, s¬π:s¬≤)
        ‚àÇ_‚àÇRÀ°·µí·∂ú = Array{Function, 2}(view_‚àÇ_‚àÇRÀ°·µí·∂ú)
        ‚àÇ_‚àÇR·µê·µí·µà·µâÀ°‚ÅªÀ°·µí·∂ú = Array{Function, 2}(view_‚àÇ_‚àÇR·µê·µí·µà·µâÀ°‚ÅªÀ°·µí·∂ú)
        info("Check: $(‚àÇ_‚àÇRÀ°·µí·∂ú)")
        info("The local solution size is $(NÀ°·µí·∂ú)√ó$(NÀ°·µí·∂ú).")
        S‚ÇÄÀ°·µí·∂ú = eye(NÀ°·µí·∂ú, NÀ°·µí·∂ú)

        if C.keep_initial_conditions
            if haskey(last_matrices, states)
                S‚ÇÄÀ°·µí·∂ú = last_matrices[states]
                info("For |$states‚ü© - Found initial condition matrix from the previous area:\n$S‚ÇÄÀ°·µí·∂ú")
            else
                #info("For |$states‚ü© - Identity matrix is used:\n$S‚ÇÄÀ°·µí·∂ú")
                if length(states) == 2
                    info("Detected a couple of neigbour solutions for the states |$states‚ü©.")
                    entries = collect(last_matrices)
                    ix_lower = findfirst(entry -> entry[1][end] == states[1], entries)
                    ix_upper = findfirst(entry -> entry[1][1] == states[2], entries)
                    if ix_upper ‚â† 0
                        S·µÅ·µñ = entries[ix_upper][2]
                        info("There exists a previous solution for the state |$(states[2])‚ü©: $(S·µÅ·µñ[1, 1]) (upper)")
                        S‚ÇÄÀ°·µí·∂ú[end, end] = S·µÅ·µñ[1, 1]
                    end
                    if ix_lower ‚â† 0
                        S·¥∏·µí = entries[ix_lower][2]
                        info("There exists a previous solution for the state |$(states[1])‚ü©: $(S·¥∏·µí[end, end]) (lower)")
                        S‚ÇÄÀ°·µí·∂ú[1, 1] = S·¥∏·µí[end, end]
                    end
                    info("For |$states‚ü© - The following matrix is used:\n$S‚ÇÄÀ°·µí·∂ú")
                else
                    info("For |$states‚ü© - Identity matrix is used:\n$S‚ÇÄÀ°·µí·∂ú")
                end
            end
        else
        end

        info("Solving... (NÀ°·µí·∂ú = $(NÀ°·µí·∂ú))")
        R·µñ·µí‚Å±‚Åø·µóÀ¢, S, S·µà·µÉ·µó·µÉ = transformationMatrixForArea(RÀ¢·µó·µÉ ≥·µó, RÀ¢·µó·µí·µñ, ‚àÇ_‚àÇRÀ°·µí·∂ú, ‚àÇ_‚àÇR·µê·µí·µà·µâÀ°‚ÅªÀ°·µí·∂ú, R·µõ, Nullable(S‚ÇÄÀ°·µí·∂ú), C)
        info("The solution contains $(length(R·µñ·µí‚Å±‚Åø·µóÀ¢)) points in the interval [$(R·µñ·µí‚Å±‚Åø·µóÀ¢[1]), $(R·µñ·µí‚Å±‚Åø·µóÀ¢[end])].")
        N = size(‚àÇ_‚àÇR·µê·µí·µà·µâÀ°, 1)
        info("Extending the solution matrix size from $(NÀ°·µí·∂ú)√ó$(NÀ°·µí·∂ú) to $N√ó$N")
        ext_S = Vector{Array{Float64, 2}}()
        for l ‚àà 1:length(R·µñ·µí‚Å±‚Åø·µóÀ¢)
            ext_SÀ° = eye(N, N)
            for i = s¬π:s¬≤, j = s¬π:s¬≤
                ext_SÀ°[i, j] = S[l][i - s¬π + 1, j - s¬π + 1]
            end
            push!(ext_S, ext_SÀ°)
        end
        info("Done")
        R¬π = R·µñ·µí‚Å±‚Åø·µóÀ¢[1]; R·µâ = R·µñ·µí‚Å±‚Åø·µóÀ¢[end]

        peaks = Vector{Tuple{Float64, Float64}}()
        for area ‚àà bunch.areas
            R‚ÇÄ·µ¢ = area.coordinate_‚àÇ_‚àÇR
            œÑ·¥ø‚Å∞‚Å± = area.value_‚àÇ_‚àÇR
            peak = (R‚ÇÄ·µ¢, œÑ·¥ø‚Å∞‚Å±)
            push!(peaks, peak)
        end
        info("Peaks in the local solution: $(peaks)")

        info("Adding to solution collection.")
        solution = LocalSolution(states,
            (R·µñ·µí‚Å±‚Åø·µóÀ¢[1], R·µñ·µí‚Å±‚Åø·µóÀ¢[end]),
            R·µñ·µí‚Å±‚Åø·µóÀ¢, R·µñ·µí‚Å±‚Åø·µóÀ¢,
            peaks,
            ext_S, S·µà·µÉ·µó·µÉ);
        last_matrix = Array{Float64, 2}(view(solution.S[1], s¬π:s¬≤, s¬π:s¬≤))
        last_matrices[states] = round(last_matrix)
        info("For the states ‚ü®$states‚ü© the last matrix at R = $(solution.points[1]) is\n$(mat2string(last_matrix))\nrounded to\n$(mat2string(last_matrices[states]))")
        push!(solutions, solution)
        info("Done")
    end
    info("End of making Cauchy problems")
    info("==== End of selective transformation matrix solving ===")
    return solutions;
end

function transformationMatrixForArea(
    RÀ¢·µó·µÉ ≥·µó::Float64, RÀ¢·µó·µí·µñ::Float64,
    ‚àÇ_‚àÇR::Array{Function, 2}, ‚àÇ_‚àÇR·µê·µí·µà·µâÀ°::Array{Function, 2},
    R·µõ::Vector{Float64},
    S‚ÇÄ·µí ∑‚Åø::Nullable{Array{Float64, 2}},
    C::DiabatizationSettings)

  Logging.configure(level=INFO)
  info("Transformation matrix calculation")

  # -----------
  N = size(‚àÇ_‚àÇR·µê·µí·µà·µâÀ°, 1)
  ‚Ñ≤R‚Éõ·µí·µñ·µó = (R‚ÇÄ::Float64, R::Float64, m‚ÇÄ, M‚ÇÄ, ŒîR‚Çò·µ¢‚Çô, ŒîR‚Çò‚Çê‚Çì) -> begin
    n = 1
    for i = 1:N, j = 1:N
      if i < j && j - i == 1
        nÀ° = max(splitn(R‚ÇÄ, R, ‚àÇ_‚àÇR[i, j], m‚ÇÄ, M‚ÇÄ, ŒîR‚Çò·µ¢‚Çô, ŒîR‚Çò‚Çê‚Çì), n)
        if nÀ° > n
            n = nÀ°
        end
      end
    end
    return splitxn(R‚ÇÄ, R, n)
  end
  # -----------

  œÉR = sign(RÀ¢·µó·µí·µñ - RÀ¢·µó·µÉ ≥·µó)
  ŒîR‚Çò·µ¢‚Çô = œÉR * min(abs(C.coordinate_step[1]), abs(C.coordinate_step[2]))
  ŒîR‚Çò‚Çê‚Çì = œÉR * max(abs(C.coordinate_step[1]), abs(C.coordinate_step[2]))

  # -----------
  progress = progressCreate(100, "Making R grid: ", :yellow); progress·∂ú = 0
  R·µñ·µí‚Å±‚Åø·µóÀ¢ = Vector{Float64}()
  R‚Çò·µ¢‚Çô = min(RÀ¢·µó·µÉ ≥·µó, RÀ¢·µó·µí·µñ); R‚Çò‚Çê‚Çì = max(RÀ¢·µó·µÉ ≥·µó, RÀ¢·µó·µí·µñ)
  R‚Éú = filter(R -> R‚Çò·µ¢‚Çô<=R<=R‚Çò‚Çê‚Çì, œÉR > 0 ? unique(R·µõ) : reverse(unique(R·µõ))); L = length(R‚Éú)
  for l = 1:L-1
    RÀ° = R‚Éú[l]; RÀ°‚Å∫¬π = R‚Éú[l + 1]
    R‚ÉõÀ° = ‚Ñ≤R‚Éõ·µí·µñ·µó(RÀ°, RÀ°‚Å∫¬π, 2e-2, 1.2e4, ŒîR‚Çò·µ¢‚Çô, ŒîR‚Çò‚Çê‚Çì)
    for k = 1:length(R‚ÉõÀ°) - 1
      RÀ°‚Çñ = R‚ÉõÀ°[k]
      push!(R·µñ·µí‚Å±‚Åø·µóÀ¢, RÀ°‚Çñ)
      progress·∂ú = floor(Int, (1 - floor(abs(RÀ°‚Çñ - RÀ¢·µó·µí·µñ)/R‚Çò‚Çê‚Çì)) * 100)
      progress!(progress, progress·∂ú, [(:R, RÀ°‚Çñ), (:ŒîR, abs(RÀ°‚Çñ - R‚ÉõÀ°[k + 1]))])
    end
  end
  push!(R·µñ·µí‚Å±‚Åø·µóÀ¢, R‚Éú[L])
  if(!allunique(R·µñ·µí‚Å±‚Åø·µóÀ¢))
      R·µñ·µí‚Å±‚Åø·µóÀ¢‚Åª·µó = unique(R·µñ·µí‚Å±‚Åø·µóÀ¢)R·µñ·µí‚Å±‚Åø·µóÀ¢[end:-1:1], S[end:-1:1], S·µà·µÉ·µó·µÉ[end:-1:1, 1:1:end]
      warn("Duplicate points are found. Resizing their vector from $(length(R·µñ·µí‚Å±‚Åø·µóÀ¢)) to $(length(R·µñ·µí‚Å±‚Åø·µóÀ¢‚Åª·µó)).")
      resize!(R·µñ·µí‚Å±‚Åø·µóÀ¢, length(R·µñ·µí‚Å±‚Åø·µóÀ¢‚Åª·µó))
      R·µñ·µí‚Å±‚Åø·µóÀ¢ = R·µñ·µí‚Å±‚Åø·µóÀ¢‚Åª·µó
  end
  finish!(progress)
  # -----------


  S‚ÇÄ = isnull(S‚ÇÄ·µí ∑‚Åø) ? eye(N, N) : get(S‚ÇÄ·µí ∑‚Åø)
  info("Going to solve a Cauchy problem with initial conditions:\n$(mat2string(S‚ÇÄ));\ncustom conditions are $(isnull(S‚ÇÄ·µí ∑‚Åø) ? "null" : "not null")")
  info("The size N = $N")
  S, S·µà·µÉ·µó·µÉ = problemCauchy(
    R·µñ·µí‚Å±‚Åø·µóÀ¢, S‚ÇÄ;
    prod_function = diabatizationODE_function,
    data = (N, ‚àÇ_‚àÇR, ‚àÇ_‚àÇR·µê·µí·µà·µâÀ°),
    œµ ≥·µâÀ° = 1e-10, œµ·µÉ·µáÀ¢ = 1e-12
  )

  if œÉR > 0
      info("Direct result")
      return R·µñ·µí‚Å±‚Åø·µóÀ¢, S, S·µà·µÉ·µó·µÉ
  else
      info("Inverted result")
      return R·µñ·µí‚Å±‚Åø·µóÀ¢[end:-1:1], S[end:-1:1], S·µà·µÉ·µó·µÉ[end:-1:1, 1:1:end]
  end
end

function error_S(S::Vector{Array{Float64, 2}})
  L = size(S, 1)
  N = size(S[1], 1)
  œµ_S = Vector{Array{Float64, 2}}(L)
  for l = 1:L
    œµ_S[l] = S[l]'*S[l]
  end
  œµ_S·µà·µÉ·µó·µÉ = matl2mdata(œµ_S)
  return œµ_S, œµ_S·µà·µÉ·µó·µÉ
end

let
  global diabatizationODE_function
  S = Array{Float64, 2}(); dS_dR = Array{Float64, 2}()
  ‚àÇ_‚àÇR = Array{Float64, 2}(); ‚àÇ_‚àÇR·µê·µí·µà·µâÀ° = Array{Float64, 2}()

  """
  We do not aspite to have an optimal implementation and
  we prefer to have this function with vivid matrix formulae.
  """
  function diabatizationODE_function(R::Float64, S_v::Vector{Float64}, dS_dR_v::Vector{Float64}, data::Tuple{Int, Array{Function, 2}, Array{Function, 2}})
    F_‚àÇ_‚àÇR = data[2]; F_‚àÇ_‚àÇR·µê·µí·µà·µâÀ° = data[3]

    N = data[1]
    @assert(N*N == size(S_v, 1), "With N = $N: $(N*N) ‚â† $(size(S_v, 1)).")
    if size(S, 1) ‚â† N || size(dS_dR, 1) ‚â† N || size(‚àÇ_‚àÇR, 1) ‚â† N || size(‚àÇ_‚àÇR·µê·µí·µà·µâÀ°, 1) ‚â† N
      S = Array{Float64, 2}(N, N); dS_dR = Array{Float64, 2}(N, N)
      ‚àÇ_‚àÇR = Array{Float64, 2}(N, N); ‚àÇ_‚àÇR·µê·µí·µà·µâÀ° = Array{Float64, 2}(N, N)
    end

    vec2mat!(S_v, S)
    for i = 1:N, j = 1:N
      ‚àÇ_‚àÇR[i, j] = F_‚àÇ_‚àÇR[i, j](R)
      ‚àÇ_‚àÇR·µê·µí·µà·µâÀ°[i, j] = F_‚àÇ_‚àÇR·µê·µí·µà·µâÀ°[i, j](R)
    end

    #dS_dR = (S*‚àÇ_‚àÇR - ‚àÇ_‚àÇR*S) - S*‚àÇ_‚àÇR·µê·µí·µà·µâÀ°
    dS_dR = -‚àÇ_‚àÇR·µê·µí·µà·µâÀ°*S

    mat2vec!(dS_dR, dS_dR_v)

    return Sundials.CV_SUCCESS
  end
end

function problemCauchy(
  X·µñ·µí‚Å±‚Åø·µóÀ¢::Vector{Float64},
  Y‚ÇÄ::Array{Float64, 2};
  prod_function::Function = nothing,
  data::Tuple{Int, Array{Function, 2}, Array{Function, 2}} = nothing,
  œµ ≥·µâÀ°::Float64 = 1e-10,
  œµ·µÉ·µáÀ¢::Float64 = 1e-12)

  N = size(Y‚ÇÄ, 1)

  Y‚Å±‚Åø‚Å±·µó = Vector{Float64}(N*N); fill!(Y‚Å±‚Åø‚Å±·µó, 0)
  for i = 1:N, j = 1:N
    l = mvec(i, j, N); Y‚Å±‚Åø‚Å±·µó[l] = Y‚ÇÄ[i, j]
  end

  Y ≥·µâÀ¢ = Sundials.cvode(
    (X·µñ, Y·µõ, dY·µõ_dx) -> prod_function(X·µñ, Y·µõ, dY·µõ_dx, data),
    Y‚Å±‚Åø‚Å±·µó, X·µñ·µí‚Å±‚Åø·µóÀ¢, nothing;
    integrator = :BDF, reltol = œµ ≥·µâÀ°, abstol = œµ·µÉ·µáÀ¢)

  N·µñ·µí‚Å±‚Åø·µóÀ¢ = size(Y ≥·µâÀ¢, 1)
  NÀ¢·µíÀ°·µò·µó‚Å±·µí‚ÅøÀ¢ = size(Y ≥·µâÀ¢, 2)
  if NÀ¢·µíÀ°·µò·µó‚Å±·µí‚ÅøÀ¢ ‚â† N*N throw(ErrorException("Unexpected: NÀ¢·µíÀ°·µò·µó‚Å±·µí‚ÅøÀ¢ ‚â† N√óN: $NÀ¢·µíÀ°·µò·µó‚Å±·µí‚ÅøÀ¢ ‚â† $N√ó$N ($(N*N))")) end
  Y = Vector{Array{Float64, 2}}(N·µñ·µí‚Å±‚Åø·µóÀ¢)
  for k = 1:N·µñ·µí‚Å±‚Åø·µóÀ¢
    Y‚Çñ = Array{Float64, 2}(N, N)
    for l = 1:N*N
      i, j = mpos(l, N)
      Y‚Çñ[i, j] = Y ≥·µâÀ¢[k, l]
    end
    Y[k] = Y‚Çñ
  end

  return Y, Y ≥·µâÀ¢
end
